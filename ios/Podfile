# Minimum iOS deployment target
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # More aggressive flag removal for ALL targets first
      ['OTHER_CFLAGS', 'OTHER_CPLUSPLUSFLAGS', 'WARNING_CFLAGS'].each do |flag_key|
        if config.build_settings[flag_key].is_a?(Array)
          config.build_settings[flag_key] = config.build_settings[flag_key].reject { |flag| flag.include?('-G') }
        elsif config.build_settings[flag_key].is_a?(String)
          config.build_settings[flag_key] = config.build_settings[flag_key].gsub(/-G\S*/, '').strip
        end
      end
      
      # Simulator-specific fixes to prevent -G flag issues
      if config.name == 'Debug' && config.build_settings['SDKROOT'] == 'iphonesimulator'
        config.build_settings.delete('GCC_GENERATE_DEBUGGING_SYMBOLS')
        config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
        config.build_settings['COPY_PHASE_STRIP'] = 'NO'
        config.build_settings['DEAD_CODE_STRIPPING'] = 'NO'
      end
      
      # Aggressive fixes for gRPC and related libraries to solve -G flag issues
      if target.name.include?('gRPC') || target.name.include?('grpc') || target.name.include?('abseil')
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
        config.build_settings['CLANG_WARN_COMMA'] = 'NO'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS'] = 'NO'
        config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
        
        # Aggressively remove all problematic compiler flags
        config.build_settings.delete('OTHER_CFLAGS')
        config.build_settings.delete('OTHER_CPLUSPLUSFLAGS') 
        config.build_settings['OTHER_CFLAGS'] = '-w'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '-w'
        config.build_settings['WARNING_CFLAGS'] = '-w'
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
        
        # Remove debug flags that might cause -G issues
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
        config.build_settings['COPY_PHASE_STRIP'] = 'NO'
        config.build_settings['DEAD_CODE_STRIPPING'] = 'NO'
        
        # Additional gRPC specific fixes
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'COCOAPODS=1', 'GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1']
      end
      
      # BoringSSL specific fixes
      if target.name.include?('BoringSSL')
        config.build_settings['WARNING_CFLAGS'] = '-w'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings.delete('OTHER_CFLAGS')
        config.build_settings['OTHER_CFLAGS'] = '-w'
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
      end
      
      # Firebase specific fixes
      if target.name.include?('Firebase')
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      end
      
      # MLKit specific fixes
      if target.name.include?('MLKit') || target.name.include?('GoogleMLKit')
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
      end
      
      # More aggressive simulator architecture exclusion for Apple Silicon Macs
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
      
      # Universal warning suppressions
      config.build_settings['CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING'] = 'NO'
      config.build_settings['CLANG_WARN_BOOL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_CONSTANT_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_EMPTY_BODY'] = 'NO'
      config.build_settings['CLANG_WARN_ENUM_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_INFINITE_RECURSION'] = 'NO'
      config.build_settings['CLANG_WARN_INT_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_NON_LITERAL_NULL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_LITERAL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_RANGE_LOOP_ANALYSIS'] = 'NO'
      config.build_settings['CLANG_WARN_SUSPICIOUS_MOVE'] = 'NO'
      config.build_settings['CLANG_WARN_UNREACHABLE_CODE'] = 'NO'
      config.build_settings['CLANG_WARN__DUPLICATE_METHOD_MATCH'] = 'NO'
      config.build_settings['GCC_WARN_64_TO_32_BIT_CONVERSION'] = 'NO'
      config.build_settings['GCC_WARN_ABOUT_RETURN_TYPE'] = 'NO'
      config.build_settings['GCC_WARN_UNDECLARED_SELECTOR'] = 'NO'
      config.build_settings['GCC_WARN_UNINITIALIZED_AUTOS'] = 'NO'
      config.build_settings['GCC_WARN_UNUSED_FUNCTION'] = 'NO'
      config.build_settings['GCC_WARN_UNUSED_VARIABLE'] = 'NO'
      
      # Final safety net - remove any remaining -G flags
      config.build_settings.each do |key, value|
        if value.is_a?(String) && value.include?('-G')
          config.build_settings[key] = value.gsub(/-G\S*/, '').strip
        elsif value.is_a?(Array)
          config.build_settings[key] = value.reject { |flag| flag.to_s.include?('-G') }
        end
      end
    end
  end

  installer.generated_projects.each do |project|
    project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
        
        # Apply the same -G flag removal to generated projects
        config.build_settings.each do |key, value|
          if value.is_a?(String) && value.include?('-G')
            config.build_settings[key] = value.gsub(/-G\S*/, '').strip
          elsif value.is_a?(Array)
            config.build_settings[key] = value.reject { |flag| flag.to_s.include?('-G') }
          end
        end
      end
    end
  end
end