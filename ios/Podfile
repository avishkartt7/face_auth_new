# Minimum iOS deployment target
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

def remove_g_flags_from_value(value)
  if value.is_a?(String)
    return value.gsub(/-G\S*/, '').gsub(/\s+/, ' ').strip
  elsif value.is_a?(Array)
    return value.reject { |flag| flag.to_s.include?('-G') }
  else
    return value
  end
end

post_install do |installer|
  puts "ðŸ”§ Starting ultra-aggressive -G flag removal..."
  
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
      
      # SKIP resource bundle targets to avoid breaking them
      next if target.name.include?('ResourceBundle') || target.name.include?('Bundle')
      
      puts "Processing target: #{target.name}"
      
      # ULTRA AGGRESSIVE: Search through ALL build settings for ANY -G flags
      config.build_settings.each do |key, value|
        # Skip file path settings to avoid corruption
        next if ['INFOPLIST_FILE', 'GCC_PREFIX_HEADER', 'MODULEMAP_FILE', 'PRODUCT_BUNDLE_IDENTIFIER', 'PRODUCT_NAME'].include?(key)
        
        original_value = value
        cleaned_value = remove_g_flags_from_value(value)
        
        if original_value != cleaned_value
          puts "  ðŸš« Removed -G flags from #{key}: #{original_value.inspect} -> #{cleaned_value.inspect}"
          config.build_settings[key] = cleaned_value
        end
      end
      
      # Simulator-specific fixes
      if config.name == 'Debug' && config.build_settings['SDKROOT'] == 'iphonesimulator'
        puts "  ðŸ”§ Applying simulator-specific fixes for #{target.name}"
        config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
        config.build_settings['COPY_PHASE_STRIP'] = 'NO'
        config.build_settings['DEAD_CODE_STRIPPING'] = 'NO'
      end
      
      # Problematic library specific fixes
      if target.name.include?('gRPC') || target.name.include?('grpc') || target.name.include?('abseil') || target.name.include?('BoringSSL')
        puts "  âš¡ Applying aggressive fixes for #{target.name}"
        
        # Completely override problematic flags
        config.build_settings['OTHER_CFLAGS'] = '-w'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '-w'
        config.build_settings['WARNING_CFLAGS'] = '-w'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
        config.build_settings['COPY_PHASE_STRIP'] = 'NO'
        config.build_settings['DEAD_CODE_STRIPPING'] = 'NO'
        
        # Remove any compiler-specific flags that might contain -G
        ['GCC_PREPROCESSOR_DEFINITIONS', 'CLANG_CXX_LANGUAGE_STANDARD', 'CLANG_CXX_LIBRARY'].each do |key|
          if config.build_settings[key]
            config.build_settings[key] = remove_g_flags_from_value(config.build_settings[key])
          end
        end
      end
    end
  end

  # Process generated projects too
  installer.generated_projects.each do |project|
    project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
        
        next if target.name.include?('ResourceBundle') || target.name.include?('Bundle')
        
        # Ultra aggressive flag removal for generated projects
        config.build_settings.each do |key, value|
          next if ['INFOPLIST_FILE', 'GCC_PREFIX_HEADER', 'MODULEMAP_FILE', 'PRODUCT_BUNDLE_IDENTIFIER', 'PRODUCT_NAME'].include?(key)
          
          cleaned_value = remove_g_flags_from_value(value)
          if value != cleaned_value
            config.build_settings[key] = cleaned_value
          end
        end
      end
    end
  end
  
  # AUTO-CREATE SYMLINKS AFTER POD INSTALL
  puts "ðŸ”§ Creating necessary symlinks..."
  
  # BoringSSL Info.plist file
  boring_ssl_target = "Pods/Target Support Files/BoringSSL"
  boring_ssl_source = "Pods/Target Support Files/BoringSSL-GRPC/BoringSSL-GRPC-Info.plist"
  unless File.exist?(boring_ssl_target)
    if File.exist?(boring_ssl_source)
      puts "âœ… Creating BoringSSL Info.plist file"
      FileUtils.cp(boring_ssl_source, boring_ssl_target)
    end
  end
  
  # MLKitFaceDetection ResourceBundle symlink
  mlkit_resource_target = "Pods/Target Support Files/MLKitFaceDetection/ResourceBundle"
  unless File.exist?(mlkit_resource_target) || File.symlink?(mlkit_resource_target)
    puts "âœ… Creating MLKitFaceDetection ResourceBundle symlink"
    File.symlink("ResourceBundle-GoogleMVFaceDetectorResources-MLKitFaceDetection-Info.plist", mlkit_resource_target)
  end
  
  # GoogleMaps ResourceBundle symlink
  maps_resource_target = "Pods/Target Support Files/GoogleMaps/ResourceBundle"
  unless File.exist?(maps_resource_target) || File.symlink?(maps_resource_target)
    puts "âœ… Creating GoogleMaps ResourceBundle symlink"
    File.symlink("ResourceBundle-GoogleMapsResources-GoogleMaps-Info.plist", maps_resource_target)
  end
  
  puts "ðŸŽ‰ Ultra-aggressive flag removal complete!"
end
