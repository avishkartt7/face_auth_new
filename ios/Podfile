require 'fileutils'

# Minimum iOS deployment target
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  puts "ðŸ”§ Starting iOS compatibility fixes..."
  
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      # Basic iOS configuration
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      
      # âœ… FIX: Remove problematic -G flags that cause ARM64 build issues
      def clean_compiler_flags(flags)
        return flags unless flags.is_a?(Array) || flags.is_a?(String)
        
        if flags.is_a?(Array)
          # Remove any flags starting with -G
          cleaned = flags.reject { |flag| flag.to_s.start_with?('-G') }
          return cleaned
        elsif flags.is_a?(String)
          # Remove -G flags from string
          cleaned = flags.gsub(/-G\S*/, '').strip
          return cleaned.empty? ? nil : cleaned
        end
        
        flags
      end
      
      # Clean all compiler flag settings
      ['OTHER_CFLAGS', 'OTHER_CPLUSPLUSFLAGS', 'OTHER_SWIFT_FLAGS'].each do |flag_key|
        if config.build_settings[flag_key]
          config.build_settings[flag_key] = clean_compiler_flags(config.build_settings[flag_key])
        end
      end
      
      # âœ… FIX: Set safe debug information format for ARM64
      config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
      config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
      
      # Essential iOS frameworks - Fixed version with proper array handling
      config.build_settings['OTHER_LDFLAGS'] ||= []
      
      # Ensure OTHER_LDFLAGS is always an array
      if config.build_settings['OTHER_LDFLAGS'].is_a?(String)
        config.build_settings['OTHER_LDFLAGS'] = [config.build_settings['OTHER_LDFLAGS']]
      end
      
      # Add frameworks safely
      ldflags_array = config.build_settings['OTHER_LDFLAGS']
      ldflags_string = ldflags_array.is_a?(Array) ? ldflags_array.join(' ') : ldflags_array.to_s
      
      unless ldflags_string.include?('-framework CoreLocation')
        config.build_settings['OTHER_LDFLAGS'] += ['-framework', 'CoreLocation']
      end
      
      unless ldflags_string.include?('-framework Foundation')
        config.build_settings['OTHER_LDFLAGS'] += ['-framework', 'Foundation']
      end
      
      unless ldflags_string.include?('-ObjC')
        config.build_settings['OTHER_LDFLAGS'] << '-ObjC'
      end
      
      # Skip resource bundle targets
      next if target.name.include?('ResourceBundle') || target.name.include?('Bundle')
      
      puts "âœ… Configured target: #{target.name}"
      
      # Firebase targets - simplified configuration
      if target.name.match(/Firebase/i) || target.name.match(/firebase_/i)
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['WARNING_CFLAGS'] = '-w'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        
        # âœ… FIX: Clean Firebase-specific flags
        config.build_settings['OTHER_CFLAGS'] = clean_compiler_flags(config.build_settings['OTHER_CFLAGS'])
      end
      
      # Protobuf targets - simplified configuration  
      if target.name.match(/nanopb|protobuf|gRPC|grpc|BoringSSL/i)
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
        config.build_settings['WARNING_CFLAGS'] = '-w'
        
        # âœ… FIX: Clean protobuf-specific flags
        config.build_settings['OTHER_CFLAGS'] = clean_compiler_flags(config.build_settings['OTHER_CFLAGS'])
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = clean_compiler_flags(config.build_settings['OTHER_CPLUSPLUSFLAGS'])
      end
      
      # âœ… FIX: ARM64-specific optimizations
      if config.name.downcase.include?('debug')
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
        config.build_settings['VALID_ARCHS'] = 'arm64'
        config.build_settings['ARCHS'] = 'arm64'
      end
      
      # General optimizations - safe for ARM64
      config.build_settings['WARNING_CFLAGS'] = '-w'
      config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
    end
  end

  # Process generated projects
  installer.generated_projects.each do |project|
    project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        
        # âœ… FIX: Clean generated project flags too
        ['OTHER_CFLAGS', 'OTHER_CPLUSPLUSFLAGS', 'OTHER_SWIFT_FLAGS'].each do |flag_key|
          if config.build_settings[flag_key]
            if config.build_settings[flag_key].is_a?(Array)
              config.build_settings[flag_key] = config.build_settings[flag_key].reject { |flag| flag.to_s.start_with?('-G') }
            elsif config.build_settings[flag_key].is_a?(String)
              config.build_settings[flag_key] = config.build_settings[flag_key].gsub(/-G\S*/, '').strip
            end
          end
        end
        
        # Add frameworks to generated projects safely
        config.build_settings['OTHER_LDFLAGS'] ||= []
        
        if config.build_settings['OTHER_LDFLAGS'].is_a?(String)
          config.build_settings['OTHER_LDFLAGS'] = [config.build_settings['OTHER_LDFLAGS']]
        end
        
        ldflags_array = config.build_settings['OTHER_LDFLAGS']
        ldflags_string = ldflags_array.is_a?(Array) ? ldflags_array.join(' ') : ldflags_array.to_s
        
        unless ldflags_string.include?('-framework CoreLocation')
          config.build_settings['OTHER_LDFLAGS'] += ['-framework', 'CoreLocation']
        end
        
        unless ldflags_string.include?('-framework Foundation')
          config.build_settings['OTHER_LDFLAGS'] += ['-framework', 'Foundation']
        end
        
        unless ldflags_string.include?('-ObjC')
          config.build_settings['OTHER_LDFLAGS'] << '-ObjC'
        end
      end
    end
  end
  
  puts "ðŸŽ‰ iOS fixes complete - ARM64 compatible!"
  puts "âœ… Deployment target: iOS 15.0"
  puts "âœ… Problematic -G flags: Removed"
  puts "âœ… ARM64 optimizations: Applied"
  puts "âœ… Essential frameworks: CoreLocation, Foundation"
  puts "âœ… Firebase and protobuf: Configured"
end
